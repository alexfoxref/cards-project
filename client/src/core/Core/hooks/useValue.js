import utils from '../../utils'
import Core from '../Core'
import CoreComponentMap from '../CoreComponentMap'

const useValue = value => {
  const id = Core.currentComponentId
  const currentComponentValues = Core.memory.get('values', id, 'values') ?? []
  const count = Core.memory.get('values', id, `count`) ?? 0
  const prevValue = currentComponentValues[count]
  const prevNames = Core.memory.get('values', id, `name`) ?? []
  const prevName = prevNames[count]

  Core.memory.set('values', id, `count`, count + 1)

  if (prevName && utils.isEqual(prevValue, value)) {
    return prevName
  }

  const name = `value_${id}_${count}_${Date.now()}`
  const newValues = [...currentComponentValues]
  const newNames = [...prevNames]

  newValues[count] = value
  newNames[count] = name

  Core.memory.set('values', id, 'values', newValues)
  Core.memory.set('values', id, `name`, newNames)

  return name
}

const isValue = name => /^value_[^_]+_[^_]_.+/.test(name)

const getValue = name => {
  // console.log('getValue', name)
  if (!utils.isString(name)) {
    return name
  }

  if (!isValue(name)) {
    // throw new Error(
    //   `Bad usage of getValue. getValue prop must be a 'string', generated by useValue function.`
    // )
    return name
  }

  const arr = name.split('_')
  const id = arr[1]
  const count = arr[2]
  const value = Core.memory.get('values', id, 'values')[count]
  let returningValue = value

  if (utils.isFunction(value)) {
    returningValue = (...args) => {
      const comp = CoreComponentMap.getComponentById(id)

      if (!comp) {
        return value(...args)
      }

      comp.effecting.value = true
      value(...args)
      comp.effecting.value = false
      // const needUpdate = Core.memory.get('effects', id, 'needUpdate')

      // if (needUpdate) {
      //   const comp = CoreComponentMap.getComponentById(id)

      //   Core.memory.set('effects', id, 'needUpdate', false)
      //   comp.updateComponent()
      // }
    }
  }

  return returningValue
}

export { useValue, getValue }
